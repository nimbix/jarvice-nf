#!/usr/bin/python3
import os
import sys
import json
import urllib
import urllib.request
import time
import re
import argparse
import base64
import requests


if __name__ == '__main__':

  # submission template
  dctSubmission = {
      'vault': {
      'name': 'sandbox',
      'readonly': False,
      'force': False
    }
  }

  parser = argparse.ArgumentParser()
  parser.add_argument('--opts', '-u', required=False, help='Cluster Options as JSON')
  parser.add_argument('--machine', '-m', required=False, default='n0', help='The machine type to run the script on')
  parser.add_argument('--nodes', '-n', required=False, type=int, default=1, help='Number of CPU nodes to use for the script')
  parser.add_argument('--container', '-c', required=False, help='Container image to use', default='us-docker.pkg.dev/jarvice/images/ubuntu-desktop:bionic')
  parser.add_argument('--label', '-l', required=False, help='Queue name')
  parser.add_argument('--workdir', '-w', required=True, help='Work directory')
  parser.add_argument('script', nargs=1, help='The script file to run')

  args = parser.parse_args()

  # TODO Grab Jarvice specific stuff
  # dctOpts = json.loads(args.opts)

  sUser = os.environ.get('JARVICE_USER')
  sAPIKey = os.environ.get('JARVICE_API_KEY')
  sURL = os.environ.get('JARVICE_API_URL')
  if (sUser is None) or (sAPIKey is None) or (sURL is None):
    print('Environment variables JARVICE_USER, JARVICE_API_KEY or JARVICE_API_URL not set')
    sys.exit(-1)

  # Ensure single slash in url path otherwise it causes empty POST for some strange reason
  if sURL[-1] != '/':
    sURL += '/'
  sURL += 'jarvice/batch'

  dctSubmission['user'] = {'username': sUser, 'apikey': sAPIKey}

  # Machine and label
  # Label is a per pipeline unique string, so that all jobs of a pipeline can be easily detected
  dctSubmission['machine'] = {'type': args.machine, 'nodes':  1}
  dctSubmission['job_label'] = args.label

  # Write a bash environment file to source all the NXF_* variables
  sEnvFile = args.label + '.env'
  with open(sEnvFile, 'w') as f:
    f.write('\n'.join([f"{k}='{v}'" for k, v in os.environ.items() if k.startswith('NXF_')]))

  with open(args.script[0]) as f:
    # Read the lines, inject a command to cd into the workdir, and source the env file
    lines = f.readlines()
    lines.insert(1, f'cd "{args.workdir}"')
    lines.insert(2, f'source "{sEnvFile}"')

    dctSubmission['container'] = {'jobscript': '\n'.join(lines), 'image': args.container}

  sDockerAuth = os.environ.get('JARVICE_DOCKER_AUTHS')
  if sDockerAuth:
    dctSubmission['container']['pullsecret'] = base64.b64encode(sDockerAuth.encode()).decode()

  print(f'Running script {args.script} on machine {args.machine} with {args.nodes} nodes', file=sys.stderr)
  print(f'Using container: {args.container}', file=sys.stderr)
  print(f'Using endpoint: {sURL}', file=sys.stderr)

  # Save submission for debug purposes
  with open('/data/submission.json', 'w') as f:
    json.dump(dctSubmission, f)

  response = requests.post(sURL, json=dctSubmission)

  # print(response.text, file=sys.stderr)
  dctRet = response.json()

  if 'error' in dctRet:
    print(dctRet)
    sys.exit(-1)

  # Nextflow reads this job number
  print(dctRet['number'], end='')
